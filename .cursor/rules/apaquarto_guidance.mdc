---
description:
globs:
alwaysApply: false
---
# APA7 Formatting with `apaquarto`

This project uses the `wjschne/apaquarto` Quarto extension for APA7 formatting. The output target is primarily DOCX.

**CURRENT STATUS:** Converting Python code chunks to R equivalents for full APA Quarto compatibility.

## Key Formatting Elements in `sud_council_paper.qmd`:
- **YAML Header:**
    ```yaml
    format:
      apaquarto-docx: default
      # apaquarto-html: default # Optional
    bibliography: references.bib
    # csl: apa.csl # apaquarto should provide this, but can be explicit if needed
    # Ensure other metadata like title, shorttitle, author, abstract, keywords are present.
    ```
- **Cross-referencing:**
    *   Tables: `tbl-label` in chunk options, reference with `@tbl-label`.
    *   Figures: `fig-label` in chunk options, reference with `@fig-label`.
    *   Equations: `eq-label`, reference with `@eq-label`.
- **Citations:**
    *   Use standard Pandoc citation syntax: `[@citekey]`, `[-@citekey]` (suppress author), `[@citekey, p. 23]`.
    *   Ensure `references.bib` is correctly formatted.
- **Tables:**
    *   When generating tables with R (e.g., using `gt` or `knitr::kable()`), ensure the output is clean Markdown that `apaquarto`'s Lua filters and DOCX template can style correctly.
    *   Table captions (`tbl-cap` in chunk options) should be descriptive and follow APA style.
    *   `apaquarto` aims to handle table notes and placement.
- **Figures:**
    *   Figure captions (`fig-cap` in chunk options) are crucial.
    *   Plots generated by R (`ggplot2`) should be styled for clarity and grayscale compatibility if possible (though APA7 allows color).
    *   Ensure plot dimensions and resolutions are suitable for a Word document.
- **Headings:** Use standard Markdown heading levels (`#`, `##`, `###`). `apaquarto` should map these to APA heading styles.
- **General Structure:** Follow APA paper structure (Title Page, Abstract, Introduction, Method, Results, Discussion, References, Appendices, Tables, Figures - `apaquarto` has options to manage float placement).

## Current Implementation Issues:
- **Mixed Languages:** QMD currently has both Python and R chunks - APA Quarto works best with pure R
- **Missing R Outputs:** Need to replace Python-generated figures/tables with R equivalents
- **Cross-references:** Current Python chunks don't properly integrate with APA Quarto cross-referencing

## Rendering Commands:
```bash
quarto render sud_council_paper.qmd --to apaquarto-docx
quarto render sud_council_paper.qmd --to apaquarto-html  # For quick preview
```

## Common `apaquarto` Considerations:
- The extension uses Lua filters and a `reference-doc` (`apaquarto.docx`) for styling
- Pure R workflow integrates better than mixed Python/R
- Pay attention to Pandoc warnings during rendering, especially related to citations or cross-references


